import { SlashCommandBuilder, EmbedBuilder } from 'discord.js';

export default {
    data: new SlashCommandBuilder()
        .setName('stats')
        .setDescription('Mostra estat√≠sticas de performance do bot.'),

    async execute(interaction) {
        try {
            const stats = interaction.client.getPerformanceStats();
            
            const embed = new EmbedBuilder()
                .setTitle('üìä Estat√≠sticas de Performance')
                .setColor('#00ff00')
                .setTimestamp();

            // Informa√ß√µes gerais
            const uptime = Math.floor(stats.uptime / 1000);
            const hours = Math.floor(uptime / 3600);
            const minutes = Math.floor((uptime % 3600) / 60);
            
            embed.addFields(
                { 
                    name: '‚è±Ô∏è Uptime', 
                    value: `${hours}h ${minutes}m`, 
                    inline: true 
                },
                { 
                    name: 'üîÑ Intera√ß√µes', 
                    value: stats.totalInteractions.toString(), 
                    inline: true 
                },
                { 
                    name: '‚ùå Erros', 
                    value: stats.totalErrors.toString(), 
                    inline: true 
                }
            );

            // Estat√≠sticas dos comandos
            const commandStats = stats.commandStats;
            embed.addFields(
                { 
                    name: 'üìÅ Comandos', 
                    value: `Carregados: ${commandStats.totalCommands}\nTempo: ${commandStats.loadTime}ms`, 
                    inline: true 
                }
            );

            // Estat√≠sticas do DisTube
            const distubeStats = stats.distubeStats;
            embed.addFields(
                { 
                    name: 'üéµ DisTube', 
                    value: `Tocadas: ${distubeStats.totalSongsPlayed}\nAdicionadas: ${distubeStats.totalSongsAdded}\nCache: ${distubeStats.cacheSize}`, 
                    inline: true 
                }
            );

            // Estat√≠sticas do √°udio
            const audioStats = stats.audioStats;
            embed.addFields(
                { 
                    name: 'üîä √Åudio', 
                    value: `Tocados: ${audioStats.totalAudiosPlayed}\nCache: ${audioStats.cacheHitRate}\nErro: ${audioStats.errorRate.toFixed(1)}%`, 
                    inline: true 
                }
            );

            // Estat√≠sticas do otimizador
            const optimizerStats = stats.optimizerStats;
            embed.addFields(
                { 
                    name: '‚ö° Otimiza√ß√µes', 
                    value: `Debounce: ${optimizerStats.debounceTimers}\nThrottle: ${optimizerStats.throttleTimers}\nCache: ${optimizerStats.cacheSize}`, 
                    inline: true 
                }
            );

            // Estat√≠sticas da IA
            const aiStats = stats.aiStats;
            embed.addFields(
                { 
                    name: 'ü§ñ IA', 
                    value: `Contextos: ${aiStats.activeContexts}/${aiStats.totalContexts}\nMensagens: ${aiStats.totalMessages}`, 
                    inline: true 
                }
            );

            // Comandos mais usados (se dispon√≠vel)
            if (commandStats.commandStats) {
                const commandUsage = Object.entries(commandStats.commandStats)
                    .sort(([,a], [,b]) => b.totalExecutions - a.totalExecutions)
                    .slice(0, 5)
                    .map(([name, stats]) => `${name}: ${stats.totalExecutions}x`)
                    .join('\n');

                if (commandUsage) {
                    embed.addFields({
                        name: 'üî• Comandos Mais Usados',
                        value: commandUsage,
                        inline: false
                    });
                }
            }

            await interaction.reply({ embeds: [embed] });

        } catch (error) {
            console.error('‚ùå Erro ao gerar estat√≠sticas:', error);
            await interaction.reply({
                content: '‚ùå Erro ao gerar estat√≠sticas de performance. Verifique se o bot est√° configurado corretamente.',
                ephemeral: true
            });
        }
    }
}; 